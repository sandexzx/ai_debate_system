"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Å–∏—Å—Ç–µ–º—ã –¥–µ–±–∞—Ç–æ–≤.
–ü–æ–º–æ–≥–∞—é—Ç –ø–æ–Ω—è—Ç—å, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏ –∏ –∫–∞–∫ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ.
"""

import json
from typing import Dict, Any
from datetime import datetime
from agents.debater import DebateContext
from agents.orchestrator import DebateSession

class DebugLogger:
    """–õ–æ–≥–≥–µ—Ä –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–µ–±–∞—Ç–æ–≤"""
    
    def __init__(self, verbose: bool = True):
        self.verbose = verbose
        self.logs = []
    
    def log_step(self, step: str, data: Any = None):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —à–∞–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏"""
        if self.verbose:
            print(f"üêõ DEBUG: {step}")
            if data:
                print(f"   Data: {str(data)[:200]}...")
        
        self.logs.append({
            "step": step,
            "data": data,
            "timestamp": "now"  # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å datetime
        })
    
    def show_context_state(self, context: DebateContext, title: str = "Context State"):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–µ–±–∞—Ç–æ–≤"""
        print(f"\nüìã {title}")
        print("=" * 50)
        print(f"Query: {context.query}")
        print(f"Current Round: {context.current_round}")
        print(f"Arguments History: {len(context.arguments_history)} rounds")
        
        for round_num, arguments in context.arguments_history.items():
            print(f"  Round {round_num}: {list(arguments.keys())}")
            for role, arg in arguments.items():
                print(f"    {role}: {len(arg)} chars - {arg[:100]}...")
        
        print(f"Scores History: {len(context.scores_history)} rounds")
        for round_num, scores in context.scores_history.items():
            print(f"  Round {round_num}: {scores}")
        
        print("=" * 50)
    
    def show_session_summary(self, session: DebateSession):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å–≤–æ–¥–∫—É –ø–æ —Å–µ—Å—Å–∏–∏"""
        print(f"\nüìä SESSION SUMMARY: {session.session_id}")
        print("=" * 60)
        print(f"Status: {session.status}")
        print(f"Original Query: {session.original_query}")
        print(f"Enhanced Query: {session.enhanced_query}")
        
        if session.context:
            print(f"\nContext Data:")
            print(f"  Total rounds in history: {len(session.context.arguments_history)}")
            print(f"  Total chars in all arguments: {self._count_total_chars(session.context)}")
        
        print(f"\nResults per round:")
        for i, result in enumerate(session.results, 1):
            print(f"  Round {i}: Winner = {result.winner}")
            print(f"    Scores: {[(role, score.total) for role, score in result.scores.items()]}")
        
        if session.final_verdict:
            print(f"\nFinal Verdict Preview:")
            print(f"  {session.final_verdict[:300]}...")
        
        print("=" * 60)
    
    def _count_total_chars(self, context: DebateContext) -> int:
        """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö"""
        total = 0
        for round_args in context.arguments_history.values():
            for arg in round_args.values():
                total += len(arg)
        return total
    
    def export_session_to_file(self, session: DebateSession, filename: str = None):
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—É—é —Å–µ—Å—Å–∏—é –≤ JSON —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        if not filename:
            filename = f"debug_session_{session.session_id}.json"
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_data = {
            "session_id": session.session_id,
            "original_query": session.original_query,
            "enhanced_query": session.enhanced_query,
            "status": session.status,
            "start_time": str(session.start_time),
            "end_time": str(session.end_time) if session.end_time else None,
            "context": self._serialize_context(session.context) if session.context else None,
            "results": self._serialize_results(session.results),
            "final_verdict": session.final_verdict
        }
        
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(export_data, f, indent=2, ensure_ascii=False)
            print(f"üìÅ Session exported to: {filename}")
        except Exception as e:
            print(f"‚ùå Error exporting session: {e}")
    
    def _serialize_context(self, context: DebateContext) -> Dict[str, Any]:
        """–°–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è JSON"""
        return {
            "query": context.query,
            "current_round": context.current_round,
            "arguments_history": context.arguments_history,
            "scores_history": context.scores_history,
            "judge_feedback": context.judge_feedback
        }
    
    def _serialize_results(self, results) -> list:
        """–°–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—É–Ω–¥–æ–≤"""
        serialized = []
        for result in results:
            serialized.append({
                "winner": result.winner,
                "scores": {role: {
                    "logic": score.logic,
                    "evidence": score.evidence,
                    "refutation": score.refutation,
                    "practicality": score.practicality,
                    "total": score.total
                } for role, score in result.scores.items()},
                "feedback": result.feedback,
                "recommendations": result.recommendations
            })
        return serialized

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
debug_logger = DebugLogger()

def show_round_arguments(context: DebateContext, round_num: int):
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞"""
    if round_num not in context.arguments_history:
        print(f"‚ùå –†–∞—É–Ω–¥ {round_num} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏–∏")
        return
    
    print(f"\nüó£Ô∏è –ê–†–ì–£–ú–ï–ù–¢–´ –†–ê–£–ù–î–ê {round_num}")
    print("=" * 60)
    
    arguments = context.arguments_history[round_num]
    for role, argument in arguments.items():
        role_name = {"D1": "PRO (–ó–∞)", "D2": "CONTRA (–ü—Ä–æ—Ç–∏–≤)", "D3": "ALTERNATIVE (–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞)"}.get(role, role)
        print(f"\n{role} - {role_name}:")
        print("-" * 40)
        print(argument)
    
    print("=" * 60)

async def async_debug_run(query: str):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –¥–µ–±–∞—Ç–æ–≤ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
    from config import Config
    from models.api_client import ModelManager
    from agents.orchestrator import DebateOrchestrator
    from token_tracker import token_tracker
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π session_id –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    debug_session_id = f"debug_{query[:20].replace(' ', '_')}_{datetime.now().strftime('%H%M%S')}"
    
    async with ModelManager(Config.MODELS, session_id=debug_session_id) as manager:
        orchestrator = DebateOrchestrator(manager)
        
        print("üêõ –ó–∞–ø—É—Å–∫ –¥–µ–±–∞—Ç–æ–≤ –≤ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–º —Ä–µ–∂–∏–º–µ")
        debug_logger.log_step("Starting debug debate", {"query": query})
        
        session = await orchestrator.run_debate(query, session_id=debug_session_id)
        
        debug_logger.show_session_summary(session)
        
        if session.context:
            debug_logger.show_context_state(session.context, "Final Context State")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–∞–∂–¥–æ–≥–æ —Ä–∞—É–Ω–¥–∞
            for round_num in session.context.arguments_history.keys():
                show_round_arguments(session.context, round_num)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–∫–µ–Ω–æ–≤
        if session.token_stats:
            print("\n" + "="*80)
            print(session.token_stats)
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–∫–µ–Ω–æ–≤
        if token_tracker:
            token_export_result = token_tracker.export_session_usage(debug_session_id)
            print(f"\n{token_export_result}")
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        debug_logger.export_session_to_file(session)
        
        return session

def quick_debug_run(query: str):
    """
    –£–°–¢–ê–†–ï–í–®–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è - –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.
    –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ async_debug_run() –≤–Ω—É—Ç—Ä–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ event loop'–∞.
    """
    print("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: quick_debug_run —É—Å—Ç–∞—Ä–µ–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ async_debug_run().")
    
    import asyncio
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–π event loop
    try:
        loop = asyncio.get_running_loop()
        print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π event loop. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ async_debug_run() –≤–º–µ—Å—Ç–æ quick_debug_run().")
        return None
    except RuntimeError:
        # –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ loop'–∞, –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π
        return asyncio.run(async_debug_run(query))