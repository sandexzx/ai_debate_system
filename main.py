#!/usr/bin/env python3
"""
AI Debate System - –°–∏—Å—Ç–µ–º–∞ –¥–µ–±–∞—Ç–æ–≤ –º–µ–∂–¥—É –ò–ò –∞–≥–µ–Ω—Ç–∞–º–∏

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É, –≥–¥–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ò–ò –º–æ–¥–µ–ª–µ–π —Å–ø–æ—Ä—è—Ç –º–µ–∂–¥—É —Å–æ–±–æ–π
–ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É, –∞ —Å—É–¥—å—è –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç –∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏ –≤—ã–Ω–æ—Å–∏—Ç –≤–µ—Ä–¥–∏–∫—Ç.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python main.py "–°—Ç–æ–∏—Ç –ª–∏ –≤–Ω–µ–¥—Ä—è—Ç—å 4-–¥–Ω–µ–≤–Ω—É—é —Ä–∞–±–æ—á—É—é –Ω–µ–¥–µ–ª—é?"
    python main.py --interactive  # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    python main.py --demo         # –î–µ–º–æ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏

–ê–≤—Ç–æ—Ä: –¢–≤–æ–π –ª—é–±–∏–º—ã–π AI —Å–µ–Ω—å–æ—Ä üöÄ
"""

import asyncio
import argparse
import sys
import os
from datetime import datetime
from typing import Optional

# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from config import Config
from models.api_client import ModelManager
from agents.orchestrator import DebateOrchestrator
from utils.file_manager import save_debate_result # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç
from model_selector import select_models

class DebateApp:
    """–ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–µ–±–∞—Ç–∞–º–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç—Ä–µ–∫–∏–Ω–≥–∞ —Ç–æ–∫–µ–Ω–æ–≤"""
    
    def __init__(self, session_id: str = None, models_config: dict = None):
        self.model_manager: Optional[ModelManager] = None
        self.orchestrator: Optional[DebateOrchestrator] = None
        self.session_id = session_id or f"app_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        self.models_config = models_config or Config.MODELS
    
    async def __aenter__(self):
        """Async context manager –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π session_id"""
        self.model_manager = ModelManager(self.models_config, session_id=self.session_id)
        await self.model_manager.__aenter__()
        
        self.orchestrator = DebateOrchestrator(self.model_manager)
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """–ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ"""
        if self.model_manager:
            await self.model_manager.__aexit__(exc_type, exc_val, exc_tb)
    
    async def run_single_debate(self, query: str) -> str:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–¥–∏–Ω –¥–µ–±–∞—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ—Ç—á–µ—Ç–æ–º –ø–æ —Ç–æ–∫–µ–Ω–∞–º"""
        if not self.orchestrator:
            raise RuntimeError("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
        
        print(f"üéØ –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–±–∞—Ç—ã: {query}")
        print("=" * 80)
        
        # –ü–µ—Ä–µ–¥–∞–µ–º –Ω–∞—à session_id –≤ orchestrator, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        session = await self.orchestrator.run_debate(query, session_id=self.session_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Ç–æ–∫–µ–Ω–∞–º–∏
        result_parts = []
        
        if session.status == "rejected":
            result_parts.append(session.final_verdict)
        elif session.status == "failed":
            result_parts.append(f"‚ùå –û—à–∏–±–∫–∞: {session.final_verdict}")
        elif session.status == "completed":
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç—á–µ—Ç
            report_parts = [
                f"üéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –î–ï–ë–ê–¢–û–í",
                f"üìù –í–æ–ø—Ä–æ—Å: {session.original_query}",
                ""
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –ø–æ —Ä–∞—É–Ω–¥–∞–º
            if session.results:
                report_parts.append("üìä –°–í–û–î–ö–ê –ü–û –†–ê–£–ù–î–ê–ú:")
                for i, result in enumerate(session.results, 1):
                    winner_scores = result.scores[result.winner]
                    report_parts.append(f"  –†–∞—É–Ω–¥ {i}: {result.winner} ({winner_scores.total} –±–∞–ª–ª–æ–≤)")
                report_parts.append("")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –≤–µ—Ä–¥–∏–∫—Ç
            if session.final_verdict:
                report_parts.append(session.final_verdict)
            
            result_parts.append("\n".join(report_parts))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –ø–æ —Ç–æ–∫–µ–Ω–∞–º
            if session.token_stats:
                result_parts.extend(["", "=" * 80, session.token_stats])
        else:
            result_parts.append(f"‚è≥ –î–µ–±–∞—Ç—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ... (—Å—Ç–∞—Ç—É—Å: {session.status})")
        
        final_result_content = "\n".join(result_parts)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª
        save_debate_result(query, final_result_content)
        
        return final_result_content
    
    async def interactive_mode(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        print("üé≠ –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –†–ï–ñ–ò–ú")
        print("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ AI –∞–≥–µ–Ω—Ç—ã –ø—Ä–æ–≤–µ–¥—É—Ç –¥–µ–±–∞—Ç—ã!")
        print("–ö–æ–º–∞–Ω–¥—ã: 'exit' - –≤—ã—Ö–æ–¥, 'help' - –ø–æ–º–æ—â—å, 'sessions' - —Å–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π")
        print("=" * 80)
        
        while True:
            try:
                query = input("\nüí¨ –í–∞—à –≤–æ–ø—Ä–æ—Å: ").strip()
                
                if query.lower() in ['exit', 'quit', '–≤—ã—Ö–æ–¥']:
                    print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    break
                elif query.lower() == 'help':
                    self._show_help()
                    continue
                elif query.lower() == 'sessions':
                    self._show_sessions()
                    continue
                elif not query:
                    print("‚ùå –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                    continue
                
                print(f"\nüöÄ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {query}")
                result = await self.run_single_debate(query)
                print(f"\n{result}")
                
            except KeyboardInterrupt:
                print("\n\nüëã –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            except Exception as e:
                print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
                print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞.")
    
    async def demo_mode(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏"""
        demo_queries = [
            "–°—Ç–æ–∏—Ç –ª–∏ –≤–Ω–µ–¥—Ä—è—Ç—å 4-–¥–Ω–µ–≤–Ω—É—é —Ä–∞–±–æ—á—É—é –Ω–µ–¥–µ–ª—é?",
            "–ù—É–∂–Ω–æ –ª–∏ —Ä–∞–∑—Ä–µ—à–∏—Ç—å —É–¥–∞–ª–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É –≤–æ –≤—Å–µ—Ö –∫–æ–º–ø–∞–Ω–∏—è—Ö?", 
            "–ü–æ–ª–µ–∑–µ–Ω –ª–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è?",
            "–°—Ç–æ–∏—Ç –ª–∏ –∑–∞–ø—Ä–µ—Ç–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–æ–≤ –≤ —à–∫–æ–ª–∞—Ö?"
        ]
        
        print("üé™ –î–ï–ú–û –†–ï–ñ–ò–ú - –ü—Ä–∏–º–µ—Ä—ã –¥–µ–±–∞—Ç–æ–≤")
        print("–°–µ–π—á–∞—Å –ø—Ä–æ–≤–µ–¥–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–µ–±–∞—Ç–æ–≤")
        print("=" * 80)
        
        for i, query in enumerate(demo_queries, 1):
            print(f"\nüéØ –î–ï–ú–û {i}/{len(demo_queries)}: {query}")
            
            try:
                result = await self.run_single_debate(query)
                print(f"\n{result}")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –¥–µ–º–æ –¥–ª—è —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
                if i < len(demo_queries):
                    print(f"\n‚è≥ –ü–∞—É–∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –¥–µ–º–æ...")
                    await asyncio.sleep(3)
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ {i}: {e}")
        
        print(f"\nüéâ –î–µ–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ü—Ä–æ–≤–µ–¥–µ–Ω–æ {len(demo_queries)} –¥–µ–±–∞—Ç–æ–≤.")
    
    def _show_help(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
        help_text = """
üìñ –°–ü–†–ê–í–ö–ê –ü–û –ö–û–ú–ê–ù–î–ê–ú:

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å - —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—Å—Ç–∏—Ç –¥–µ–±–∞—Ç—ã
‚Ä¢ 'exit' –∏–ª–∏ 'quit' - –≤—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã  
‚Ä¢ 'help' - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
‚Ä¢ 'sessions' - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–µ–±–∞—Ç–æ–≤

–ü—Ä–∏–º–µ—Ä—ã —Ö–æ—Ä–æ—à–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –¥–µ–±–∞—Ç–æ–≤:
‚Ä¢ "–°—Ç–æ–∏—Ç –ª–∏ –≤–Ω–µ–¥—Ä—è—Ç—å 4-–¥–Ω–µ–≤–Ω—É—é —Ä–∞–±–æ—á—É—é –Ω–µ–¥–µ–ª—é?"
‚Ä¢ "–ü–æ–ª–µ–∑–µ–Ω –ª–∏ –ò–ò –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è?"
‚Ä¢ "–ù—É–∂–Ω–æ –ª–∏ –∑–∞–ø—Ä–µ—Ç–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã?"
‚Ä¢ "–°—Ç–æ–∏—Ç –ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–∏?"

–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:
‚úì –§–∏–ª—å—Ç—Ä—É–µ—Ç —Å–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã
‚úì –£–ª—É—á—à–∞–µ—Ç —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É –∑–∞–ø—Ä–æ—Å–∞
‚úì –ü—Ä–æ–≤–æ–¥–∏—Ç 3 —Ä–∞—É–Ω–¥–∞ –¥–µ–±–∞—Ç–æ–≤ –º–µ–∂–¥—É —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏
‚úì –í—ã–Ω–æ—Å–∏—Ç –∏—Ç–æ–≥–æ–≤—ã–π –≤–µ—Ä–¥–∏–∫—Ç —á–µ—Ä–µ–∑ –ò–ò-—Å—É–¥—å—é
"""
        print(help_text)
    
    def _show_sessions(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""
        if not self.orchestrator:
            print("‚ùå –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return
        
        sessions = self.orchestrator.list_sessions()
        
        if not sessions:
            print("üìù –ü–æ–∫–∞ –Ω–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –¥–µ–±–∞—Ç–∞")
            return
        
        print(f"üìä –ü–†–û–í–ï–î–ï–ù–ù–´–ï –î–ï–ë–ê–¢–´ ({len(sessions)}):")
        print("-" * 50)
        
        for session_id in sessions[-10:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
            summary = self.orchestrator.get_session_summary(session_id)
            if summary:
                print(f"{summary}\n")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    parser = argparse.ArgumentParser(
        description="AI Debate System - –î–µ–±–∞—Ç—ã –º–µ–∂–¥—É –ò–ò –∞–≥–µ–Ω—Ç–∞–º–∏",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python main.py "–°—Ç–æ–∏—Ç –ª–∏ –≤–Ω–µ–¥—Ä—è—Ç—å 4-–¥–Ω–µ–≤–Ω—É—é —Ä–∞–±–æ—á—É—é –Ω–µ–¥–µ–ª—é?"
  python main.py --interactive
  python main.py --demo
        """
    )
    
    parser.add_argument(
        "query", 
        nargs="?", 
        help="–í–æ–ø—Ä–æ—Å –¥–ª—è –¥–µ–±–∞—Ç–æ–≤"
    )
    
    parser.add_argument(
        "--interactive", "-i",
        action="store_true",
        help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ"
    )

    parser.add_argument(
        "--demo", 
        action="store_true",
        help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏"
    )
    
    parser.add_argument(
        "--debug", 
        action="store_true",
        help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –ª–æ–≥–∞–º–∏"
    )
    
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    missing_keys = []
    
    if Config.PROVIDER == "neuroapi":
        if not Config.NEUROAPI_API_KEY or Config.NEUROAPI_API_KEY == "your-neuroapi-key":
            missing_keys.append("NEUROAPI_API_KEY")
    else:  # openrouter
        if not Config.OPENROUTER_API_KEY or Config.OPENROUTER_API_KEY == "your-openrouter-key":
            missing_keys.append("OPENROUTER_API_KEY")
    
    if missing_keys:
        provider_name = "neuroAPI" if Config.PROVIDER == "neuroapi" else "OpenRouter"
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç API –∫–ª—é—á–∏ –¥–ª—è {provider_name}:")
        for key in missing_keys:
            print(f"   ‚Ä¢ {key}")
        print(f"\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        if Config.PROVIDER == "neuroapi":
            print("   export NEUROAPI_API_KEY='–≤–∞—à-–∫–ª—é—á-neuroapi'")
        else:
            print("   export OPENROUTER_API_KEY='–≤–∞—à-–∫–ª—é—á-openrouter'")
        print("–ò–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ config.py")
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ prompt.txt –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞
    script_dir = os.path.dirname(os.path.abspath(__file__))
    prompt_file = os.path.join(script_dir, "prompt.txt")
    
    query_from_file = None
    if os.path.exists(prompt_file):
        try:
            with open(prompt_file, 'r', encoding='utf-8') as f:
                query_from_file = f.read().strip()
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ prompt.txt: {e}")
    
    # –í—ã–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–¥–µ–ª–µ–π –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    print("üöÄ –°–ò–°–¢–ï–ú–ê –î–ï–ë–ê–¢–û–í –ú–ï–ñ–î–£ –ò–ò")
    print("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –¥–µ–±–∞—Ç–æ–≤.")
    print()
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        models_config = Config.get_models()
        provider_name = "neuroAPI" if Config.PROVIDER == "neuroapi" else "OpenRouter"
        print(f"üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {provider_name}")
        print(f"üéØ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞! –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É...")
        print("=" * 60)
        print()
    except KeyboardInterrupt:
        print("\nüëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
        sys.exit(0)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ: {e}")
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    try:
        async with DebateApp(models_config=models_config) as app:
            
            if args.debug:
                # –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                query = args.query or query_from_file
                if query:
                    from debug_utils import async_debug_run
                    await async_debug_run(query)
                else:
                    print("‚ùå –í —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∑–∞–ø—Ä–æ—Å")
                    print("–ü—Ä–∏–º–µ—Ä: python main.py --debug '–í–∞—à –≤–æ–ø—Ä–æ—Å' –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª prompt.txt")
            elif args.demo:
                await app.demo_mode()
            elif args.interactive:
                await app.interactive_mode()
            elif args.query:
                result = await app.run_single_debate(args.query)
                print(result)
            elif query_from_file:
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª prompt.txt, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                print(f"üìù –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø—Ä–æ—Å –∏–∑ prompt.txt: {query_from_file}")
                result = await app.run_single_debate(query_from_file)
                print(result)
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
                await app.interactive_mode()
                
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ asyncio event loop
    asyncio.run(main())
