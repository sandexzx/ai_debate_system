"""
–ú–æ–¥—É–ª—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–∏—Å—Ç–µ–º—ã –¥–µ–±–∞—Ç–æ–≤.
–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –µ–¥–∏–Ω—É—é –º–æ–¥–µ–ª—å –¥–ª—è –≤—Å–µ—Ö —Ä–æ–ª–µ–π
–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ config.py
"""

import sys
from typing import Dict, Optional, Tuple
from dataclasses import replace
from config import Config, ModelConfig
from token_tracker import token_tracker


class ModelSelector:
    """–ö–ª–∞—Å—Å –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏"""
    
    def __init__(self):
        # –ú–æ–¥–µ–ª–∏ —Å —Ü–µ–Ω–∞–º–∏ –∏–∑ token_tracker
        self.available_models = {
            "google/gemini-2.5-flash-lite-preview-06-17": "Gemini 2.5 Flash Lite (—Å–∞–º–∞—è –¥–µ—à–µ–≤–∞—è)",
            "google/gemini-2.5-flash": "Gemini 2.5 Flash (–±—ã—Å—Ç—Ä–∞—è –∏ –¥–µ—à–µ–≤–∞—è)",
            "anthropic/claude-sonnet-4": "Claude Sonnet 4 (–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è)",
            "openai/gpt-4o-mini-2024-07-18": "GPT-4o Mini (—ç–∫–æ–Ω–æ–º–∏—á–Ω–∞—è)",
            "google/gemini-2.5-pro": "Gemini 2.5 Pro (–ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è)",
            "openai/o3": "OpenAI o3 (–Ω–æ–≤–∞—è)",
            "openai/gpt-4.1": "GPT-4.1 (—Å—Ç–∞–±–∏–ª—å–Ω–∞—è)"
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –º–æ–¥–µ–ª–∏ –µ—Å—Ç—å –≤ pricing
        self.pricing = token_tracker.pricing
    
    def show_model_menu(self) -> Tuple[bool, Optional[str]]:
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏.
        
        Returns:
            Tuple[bool, Optional[str]]: (use_custom, selected_model)
            - use_custom: True –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã –∫–∞—Å—Ç–æ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            - selected_model: ID –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –∏–ª–∏ None –¥–ª—è –∫–∞—Å—Ç–æ–º–∞
        """
        print("ü§ñ –í–´–ë–û–† –ú–û–î–ï–õ–ò –î–õ–Ø –î–ï–ë–ê–¢–û–í")
        print("=" * 60)
        print()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ —Å —Ü–µ–Ω–∞–º–∏
        print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ (—Å —Ü–µ–Ω–∞–º–∏ –∑–∞ 1K —Ç–æ–∫–µ–Ω–æ–≤):")
        print()
        
        model_options = []
        for i, (model_id, description) in enumerate(self.available_models.items(), 1):
            pricing = self.pricing.get(model_id, {"input": 0, "output": 0})
            input_cost = pricing["input"] * 1000  # –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ USD –∑–∞ 1K —Ç–æ–∫–µ–Ω–æ–≤
            output_cost = pricing["output"] * 1000
            
            print(f"{i}. {description}")
            print(f"   –ú–æ–¥–µ–ª—å: {model_id}")
            print(f"   –¶–µ–Ω–∞: ${input_cost:.4f} (–≤—Ö–æ–¥) / ${output_cost:.4f} (–≤—ã—Ö–æ–¥)")
            print()
            
            model_options.append(model_id)
        
        # –û–ø—Ü–∏—è –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        custom_option = len(model_options) + 1
        print(f"{custom_option}. –ö–∞—Å—Ç–æ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (—Ä–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–æ–ª–µ–π)")
        print("   –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥–µ–ª–∏ –∏–∑ config.py:")
        for role, model_config in Config.MODELS.items():
            print(f"   ‚Ä¢ {role}: {model_config.model_id}")
        print()
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        while True:
            try:
                choice = input(f"–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (1-{custom_option}): ").strip()
                
                if not choice:
                    print("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–ø—Ü–∏–∏")
                    continue
                
                choice_num = int(choice)
                
                if 1 <= choice_num <= len(model_options):
                    selected_model = model_options[choice_num - 1]
                    model_name = self.available_models[selected_model]
                    
                    print(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {model_name}")
                    print(f"   –í—Å–µ —Ä–æ–ª–∏ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: {selected_model}")
                    return False, selected_model
                
                elif choice_num == custom_option:
                    print("‚úÖ –í—ã–±—Ä–∞–Ω—ã –∫–∞—Å—Ç–æ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
                    print("   –ö–∞–∂–¥–∞—è —Ä–æ–ª—å –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ—é –º–æ–¥–µ–ª—å –∏–∑ config.py")
                    return True, None
                
                else:
                    print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {custom_option}")
                    
            except ValueError:
                print("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
            except KeyboardInterrupt:
                print("\nüëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
                sys.exit(0)
    
    def create_unified_config(self, model_id: str) -> Dict[str, ModelConfig]:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é, –≥–¥–µ –≤—Å–µ —Ä–æ–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –æ–¥–Ω—É –º–æ–¥–µ–ª—å.
        
        Args:
            model_id: ID –º–æ–¥–µ–ª–∏ –¥–ª—è –≤—Å–µ—Ö —Ä–æ–ª–µ–π
            
        Returns:
            Dict[str, ModelConfig]: –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π
        """
        unified_models = {}
        
        # –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–æ–ª–µ–π
        role_temperatures = {
            "gatekeeper": 0.3,      # –°—Ç—Ä–æ–≥–∏–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            "debater_pro": 0.8,     # –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –¥–ª—è —Å–ø–æ—Ä–æ–≤
            "debater_contra": 0.8,  # –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –¥–ª—è —Å–ø–æ—Ä–æ–≤
            "debater_alternative": 0.9,  # –°–∞–º—ã–π –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –¥–ª—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤
            "judge": 0.4           # –û–±—ä–µ–∫—Ç–∏–≤–Ω—ã–π –¥–ª—è —Å—É–¥–µ–π—Å—Ç–≤–∞
        }
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–π —Ä–æ–ª–∏
        for role in Config.MODELS.keys():
            base_config = Config.MODELS[role]
            
            unified_models[role] = replace(
                base_config,
                model_id=model_id,
                temperature=role_temperatures.get(role, 0.7)
            )
        
        return unified_models
    
    def get_model_configuration(self) -> Dict[str, ModelConfig]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–¥–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Returns:
            Dict[str, ModelConfig]: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        """
        use_custom, selected_model = self.show_model_menu()
        
        if use_custom:
            print("üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ config.py")
            return Config.MODELS
        else:
            print(f"üéØ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤—Å–µ —Ä–æ–ª–∏ –Ω–∞ –º–æ–¥–µ–ª—å: {selected_model}")
            return self.create_unified_config(selected_model)


def select_models() -> Dict[str, ModelConfig]:
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–µ–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    
    Returns:
        Dict[str, ModelConfig]: –í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π
    """
    selector = ModelSelector()
    return selector.get_model_configuration()


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–µ–π")
    config = select_models()
    
    print("\nüìä –ò—Ç–æ–≥–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    for role, model_config in config.items():
        print(f"‚Ä¢ {role}: {model_config.model_id} (temp: {model_config.temperature})")