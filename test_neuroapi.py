#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ neuroAPI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
"""

import asyncio
import os
from config import Config, ModelConfig
from models.api_client import APIClient

async def test_neuroapi():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ neuroAPI"""
    print("üß™ –¢–ï–°–¢–ò–†–£–ï–ú NEUROAPI")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    if not Config.NEUROAPI_API_KEY or Config.NEUROAPI_API_KEY == "your-neuroapi-key":
        print("‚ùå NEUROAPI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é: export NEUROAPI_API_KEY='–≤–∞—à-–∫–ª—é—á'")
        return False
    
    print(f"‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {Config.NEUROAPI_API_KEY[:10]}...")
    print(f"üåê Base URL: {Config.NEUROAPI_BASE_URL}")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (–∏—Å–ø–æ–ª—å–∑—É–µ–º gpt-5-thinking-all)
    test_config = ModelConfig(
        name="test_neuro",
        api_key=Config.NEUROAPI_API_KEY,
        base_url=Config.NEUROAPI_BASE_URL,
        model_id="gpt-5-thinking-all",
        temperature=0.7
    )
    
    print(f"ü§ñ –ú–æ–¥–µ–ª—å: {test_config.model_id}")
    print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    try:
        async with APIClient(test_config, session_id="test_session", role="test") as client:
            print("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å...")
            
            test_messages = [
                {"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ neuroAPI?"}
            ]
            
            response = await client.chat_completion(test_messages)
            
            print("‚úÖ –£–°–ü–ï–•! –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:")
            print(f"üìù {response}")
            print()
            
            return True
            
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ neuroAPI:")
        print(f"   {str(e)}")
        return False

async def test_all_models():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ neuroAPI"""
    print("üß™ –¢–ï–°–¢–ò–†–£–ï–ú –í–°–ï –ú–û–î–ï–õ–ò NEUROAPI")
    print("=" * 50)
    
    if not Config.NEUROAPI_API_KEY or Config.NEUROAPI_API_KEY == "your-neuroapi-key":
        print("‚ùå NEUROAPI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return False
    
    neuro_models = Config.NEUROAPI_MODELS
    successful_tests = 0
    
    for model_name, model_config in neuro_models.items():
        print(f"\nü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º {model_name}...")
        
        try:
            async with APIClient(model_config, session_id=f"test_{model_name}", role=model_name) as client:
                test_messages = [
                    {"role": "user", "content": f"–ü—Ä–∏–≤–µ—Ç –æ—Ç {model_name}! –û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ."}
                ]
                
                response = await client.chat_completion(test_messages)
                print(f"   ‚úÖ {model_name}: {response[:100]}...")
                successful_tests += 1
                
        except Exception as e:
            print(f"   ‚ùå {model_name}: {str(e)}")
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢: {successful_tests}/{len(neuro_models)} –º–æ–¥–µ–ª–µ–π —Ä–∞–±–æ—Ç–∞—é—Ç")
    return successful_tests == len(neuro_models)

async def test_vs_openrouter():
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã neuroAPI –∏ OpenRouter"""
    print("üß™ –°–†–ê–í–ù–ò–í–ê–ï–ú NEUROAPI VS OPENROUTER")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–∏
    if not Config.NEUROAPI_API_KEY or Config.NEUROAPI_API_KEY == "your-neuroapi-key":
        print("‚ùå NEUROAPI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
        
    if not Config.OPENROUTER_API_KEY or Config.OPENROUTER_API_KEY == "your-openrouter-key":
        print("‚ùå OPENROUTER_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    neuro_config = ModelConfig(
        name="neuro_test",
        api_key=Config.NEUROAPI_API_KEY,
        base_url=Config.NEUROAPI_BASE_URL,
        model_id="gpt-5-thinking-all",
        temperature=0.7
    )
    
    openrouter_config = ModelConfig(
        name="openrouter_test",
        api_key=Config.OPENROUTER_API_KEY,
        base_url=Config.OPENROUTER_BASE_URL,
        model_id="openai/gpt-4o-mini-2024-07-18",
        temperature=0.7
    )
    
    test_question = "–û–±—ä—è—Å–Ω–∏ –≤ –¥–≤—É—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö, —á—Ç–æ —Ç–∞–∫–æ–µ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ?"
    
    print(f"‚ùì –í–æ–ø—Ä–æ—Å: {test_question}")
    print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º neuroAPI
    try:
        async with APIClient(neuro_config) as neuro_client:
            print("üîÑ neuroAPI –æ—Ç–≤–µ—á–∞–µ—Ç...")
            neuro_response = await neuro_client.chat_completion([
                {"role": "user", "content": test_question}
            ])
            print(f"üß† neuroAPI (gpt-5): {neuro_response}")
    except Exception as e:
        print(f"‚ùå neuroAPI –æ—à–∏–±–∫–∞: {e}")
    
    print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º OpenRouter
    try:
        async with APIClient(openrouter_config) as or_client:
            print("üîÑ OpenRouter –æ—Ç–≤–µ—á–∞–µ—Ç...")
            or_response = await or_client.chat_completion([
                {"role": "user", "content": test_question}
            ])
            print(f"üîÑ OpenRouter (gpt-4o-mini): {or_response}")
    except Exception as e:
        print(f"‚ùå OpenRouter –æ—à–∏–±–∫–∞: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï NEUROAPI –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
    print("=" * 60)
    print()
    
    # –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç
    basic_success = await test_neuroapi()
    
    if basic_success:
        print("\n" + "=" * 60)
        
        # –¢–µ—Å—Ç –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
        all_models_success = await test_all_models()
        
        print("\n" + "=" * 60)
        
        # –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç
        await test_vs_openrouter()
        
        print("\n" + "=" * 60)
        print("üéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
        
        if all_models_success:
            print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
    else:
        print("\n‚ùå –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API.")

if __name__ == "__main__":
    asyncio.run(main())