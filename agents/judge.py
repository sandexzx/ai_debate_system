import re
from typing import Dict, Tuple, Optional
from models.prompts import PromptTemplates
from agents.debater import DebateContext
from dataclasses import dataclass

@dataclass
class RoundScore:
    """–û—Ü–µ–Ω–∫–∞ –æ–¥–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∑–∞ —Ä–∞—É–Ω–¥"""
    logic: int          # –õ–æ–≥–∏—á–Ω–æ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ (0-10)
    evidence: int       # –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –±–∞–∑–∞ (0-10)  
    refutation: int     # –û–ø—Ä–æ–≤–µ—Ä–∂–µ–Ω–∏–µ –æ–ø–ø–æ–Ω–µ–Ω—Ç–æ–≤ (0-10)
    practicality: int   # –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç—å (0-10)
    
    @property
    def total(self) -> int:
        return self.logic + self.evidence + self.refutation + self.practicality

@dataclass  
class RoundResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ü–µ–Ω–∫–∏ —Ä–∞—É–Ω–¥–∞"""
    scores: Dict[str, RoundScore]  # {role: RoundScore}
    winner: str                    # –ü–æ–±–µ–¥–∏—Ç–µ–ª—å —Ä–∞—É–Ω–¥–∞
    feedback: str                  # –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç —Å—É–¥—å–∏
    recommendations: str           # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥

class Judge:
    """
    –ê–≥–µ–Ω—Ç-—Å—É–¥—å—è, –∫–æ—Ç–æ—Ä—ã–π –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –≤ –¥–µ–±–∞—Ç–∞—Ö.
    –í—ã—Å—Ç–∞–≤–ª—è–µ—Ç –±–∞–ª–ª—ã, –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π —Ä–∞—É–Ω–¥–æ–≤ –∏ —Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è.
    """
    
    def __init__(self, model_manager):
        self.model_manager = model_manager
        self.model_name = "judge"
        
        # –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ü–µ–Ω–æ–∫
        self.score_pattern = re.compile(r'D([123]).*?(\d+)\+(\d+)\+(\d+)\+(\d+)\s*=\s*(\d+)')
        self.winner_pattern = re.compile(r'–ü–û–ë–ï–î–ò–¢–ï–õ–¨ –†–ê–£–ù–î–ê:\s*D([123])')
    
    async def evaluate_round(self, context: DebateContext, round_arguments: Dict[str, str]) -> RoundResult:
        """
        –û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Ä–∞—É–Ω–¥ –¥–µ–±–∞—Ç–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –±–∞–ª–ª–∞–º–∏ –∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º.
        
        Args:
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–µ–±–∞—Ç–æ–≤ —Å –ø–æ–ª–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π
            round_arguments: –ê—Ä–≥—É–º–µ–Ω—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞ {role: argument}
            
        Returns:
            RoundResult: –ü–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ü–µ–Ω–∫–∏ —Ä–∞—É–Ω–¥–∞
        """
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–∫—É—â–∏–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
        temp_context = self._update_context_with_arguments(context, round_arguments)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å—É–¥—å–∏
        judge_prompt = PromptTemplates.get_judge_prompt(
            query=context.query,
            round_num=context.current_round,
            arguments=temp_context.arguments_history,
            is_final=False
        )
        
        messages = [{"role": "user", "content": judge_prompt}]
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ü–µ–Ω–∫—É –æ—Ç –º–æ–¥–µ–ª–∏-—Å—É–¥—å–∏
            response = await self.model_manager.query_model(
                model_name=self.model_name,
                messages=messages,
                system_prompt=PromptTemplates.JUDGE_SYSTEM
            )
            
            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç —Å—É–¥—å–∏
            return self._parse_judge_response(response, round_arguments)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ —Ä–∞—É–Ω–¥–∞: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –æ—Ü–µ–Ω–∫—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return self._get_fallback_evaluation(round_arguments)
    
    async def final_verdict(self, context: DebateContext) -> str:
        """
        –í—ã–Ω–æ—Å–∏—Ç –∏—Ç–æ–≥–æ–≤—ã–π –≤–µ—Ä–¥–∏–∫—Ç –ø–æ –≤—Å–µ–º –¥–µ–±–∞—Ç–∞–º –∏ —Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é.
        
        Args:
            context: –ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—Å–µ—Ö –¥–µ–±–∞—Ç–æ–≤
            
        Returns:
            str: –ò—Ç–æ–≥–æ–≤—ã–π –≤–µ—Ä–¥–∏–∫—Ç –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        """
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è
        final_prompt = PromptTemplates.get_judge_prompt(
            query=context.query,
            round_num=0,  # –ù–µ –≤–∞–∂–Ω–æ –¥–ª—è —Ñ–∏–Ω–∞–ª–∞
            arguments=context.arguments_history,
            is_final=True
        )
        
        messages = [{"role": "user", "content": final_prompt}]
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ
            verdict = await self.model_manager.query_model(
                model_name=self.model_name,
                messages=messages,
                system_prompt=PromptTemplates.JUDGE_SYSTEM
            )
            
            return self._format_final_verdict(verdict, context)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–Ω–µ—Å–µ–Ω–∏–∏ –≤–µ—Ä–¥–∏–∫—Ç–∞: {e}")
            return self._get_fallback_verdict(context)
    
    def _update_context_with_arguments(self, context: DebateContext, round_arguments: Dict[str, str]) -> DebateContext:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–æ–≤—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ —Ä–∞—É–Ω–¥–∞.
        
        –í–ê–ñ–ù–û: –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–µ—Ç –í–†–ï–ú–ï–ù–ù–£–Æ –∫–æ–ø–∏—é –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        –ø—Ä–æ–º–ø—Ç–∞ —Å—É–¥—å–∏. –†–µ–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ orchestrator.
        """
        updated_history = context.arguments_history.copy()
        updated_history[context.current_round] = round_arguments
        
        return DebateContext(
            query=context.query,
            current_round=context.current_round,
            arguments_history=updated_history,
            scores_history=context.scores_history,
            judge_feedback=context.judge_feedback,
            summaries=context.summaries
        )
    
    def _parse_judge_response(self, response: str, round_arguments: Dict[str, str]) -> RoundResult:
        """
        –ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç —Å—É–¥—å–∏ –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –æ—Ü–µ–Ω–∫–∏, –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏ —Ñ–∏–¥–±–µ–∫.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.
        """
        
        scores = {}
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ü–µ–Ω–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        score_matches = self.score_pattern.findall(response)
        
        for match in score_matches:
            role_num, logic, evidence, refutation, practicality, total = match
            role = f"D{role_num}"
            
            scores[role] = RoundScore(
                logic=int(logic),
                evidence=int(evidence), 
                refutation=int(refutation),
                practicality=int(practicality)
            )
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ü–µ–Ω–∫–∏, —Å—Ç–∞–≤–∏–º –±–∞–∑–æ–≤—ã–µ
        if not scores:
            scores = self._generate_fallback_scores(round_arguments)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —Ä–∞—É–Ω–¥–∞
        winner_match = self.winner_pattern.search(response)
        if winner_match:
            winner = f"D{winner_match.group(1)}"
        else:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –ø–æ –Ω–∞–∏–≤—ã—Å—à–µ–º—É –±–∞–ª–ª—É
            winner = max(scores.keys(), key=lambda role: scores[role].total, default="D1")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = self._extract_recommendations(response)
        
        return RoundResult(
            scores=scores,
            winner=winner,
            feedback=response,
            recommendations=recommendations
        )
    
    def _generate_fallback_scores(self, round_arguments: Dict[str, str]) -> Dict[str, RoundScore]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—ã–µ –æ—Ü–µ–Ω–∫–∏, –µ—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è"""
        scores = {}
        
        for role in round_arguments.keys():
            # –ë–∞–∑–æ–≤—ã–µ –æ—Ü–µ–Ω–∫–∏ 6-8 –±–∞–ª–ª–æ–≤ –ø–æ –∫–∞–∂–¥–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é
            scores[role] = RoundScore(
                logic=7,
                evidence=6, 
                refutation=6,
                practicality=7
            )
        
        return scores
    
    def _extract_recommendations(self, response: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ —Å—É–¥—å–∏"""
        
        # –ò—â–µ–º —Å–µ–∫—Ü–∏—é —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
        rec_patterns = [
            r'–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò.*?:(.*?)(?=\n\n|\Z)',
            r'–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ù–ê –°–õ–ï–î–£–Æ–©–ò–ô –†–ê–£–ù–î:(.*?)(?=\n\n|\Z)',
            r'—á—Ç–æ —É–ª—É—á—à–∏—Ç—å.*?:(.*?)(?=\n\n|\Z)'
        ]
        
        for pattern in rec_patterns:
            match = re.search(pattern, response, re.DOTALL | re.IGNORECASE)
            if match:
                return match.group(1).strip()
        
        return "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ, —É—Å–∏–ª–∏–≤–∞—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏—é."
    
    def _format_final_verdict(self, verdict: str, context: DebateContext) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –≤–µ—Ä–¥–∏–∫—Ç –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–µ–±–∞—Ç–æ–≤
        stats = self._calculate_debate_stats(context)
        
        formatted = f"""
üèõÔ∏è –ò–¢–û–ì–û–í–´–ô –í–ï–†–î–ò–ö–¢ –î–ï–ë–ê–¢–û–í üèõÔ∏è

{verdict}

üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–ï–ë–ê–¢–û–í:
‚Ä¢ –í—Å–µ–≥–æ —Ä–∞—É–Ω–¥–æ–≤: {len(context.arguments_history)}
‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(set().union(*[args.keys() for args in context.arguments_history.values()]))}
‚Ä¢ –û–±—â–∏–π –æ–±—ä–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤: ~{stats['total_chars']} —Å–∏–º–≤–æ–ª–æ–≤

{stats['winners_summary']}
"""
        return formatted
    
    def _calculate_debate_stats(self, context: DebateContext) -> Dict:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–µ–±–∞—Ç–æ–≤"""
        
        total_chars = 0
        round_winners = []
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–∞—É–Ω–¥–∞–º  
        for round_num, arguments in context.arguments_history.items():
            total_chars += sum(len(arg) for arg in arguments.values())
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —Ä–∞—É–Ω–¥–∞ –ø–æ –æ—á–∫–∞–º (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if round_num in context.scores_history:
                scores = context.scores_history[round_num]
                winner = max(scores.keys(), key=lambda k: scores[k])
                round_winners.append(winner)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
        if round_winners:
            winners_count = {role: round_winners.count(role) for role in set(round_winners)}
            winners_summary = "üèÜ –ü–æ–±–µ–¥—ã –ø–æ —Ä–∞—É–Ω–¥–∞–º: " + ", ".join([f"{role}: {count}" for role, count in winners_count.items()])
        else:
            winners_summary = ""
        
        return {
            'total_chars': total_chars,
            'winners_summary': winners_summary
        }
    
    def _get_fallback_evaluation(self, round_arguments: Dict[str, str]) -> RoundResult:
        """–ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏"""
        
        scores = self._generate_fallback_scores(round_arguments)
        winner = list(round_arguments.keys())[0] if round_arguments else "D1"
        
        return RoundResult(
            scores=scores,
            winner=winner,
            feedback="–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ —Ä–∞—É–Ω–¥–∞",
            recommendations="–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏—é"
        )
    
    def _get_fallback_verdict(self, context: DebateContext) -> str:
        """–ë–∞–∑–æ–≤—ã–π –≤–µ—Ä–¥–∏–∫—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏"""
        
        return f"""
üèõÔ∏è –ò–¢–û–ì–û–í–´–ô –í–ï–†–î–ò–ö–¢ (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ä–µ–∂–∏–º)

–ó–ê–ü–†–û–°: {context.query}

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –≤–µ—Ä–¥–∏–∫—Ç–∞.
–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –¥–µ–±–∞—Ç–æ–≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª–∏ —Ü–µ–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø–æ –¥–∞–Ω–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É.

–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤—Å–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ä–µ—à–µ–Ω–∏—è.
"""
