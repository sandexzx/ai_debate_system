import asyncio
from typing import Dict, List, Optional, Tuple, Callable
from dataclasses import dataclass, field
from datetime import datetime

from agents.gatekeeper import Gatekeeper  
from agents.debater import ProDebater, ContraDebater, AlternativeDebater, DebateContext
from agents.judge import Judge, RoundResult
from config import Config
from token_tracker import token_tracker

@dataclass
class DebateSession:
    """–ü–æ–ª–Ω–∞—è —Å–µ—Å—Å–∏—è –¥–µ–±–∞—Ç–æ–≤ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π —Ç–æ–∫–µ–Ω–æ–≤"""
    session_id: str
    original_query: str
    enhanced_query: str
    start_time: datetime
    end_time: Optional[datetime] = None
    context: Optional[DebateContext] = None
    results: List[RoundResult] = field(default_factory=list)
    final_verdict: Optional[str] = None
    status: str = "pending"  # pending, running, completed, failed
    token_stats: Optional[str] = None  # –û—Ç—á–µ—Ç –ø–æ —Ç–æ–∫–µ–Ω–∞–º

class DebateOrchestrator:
    """
    –ì–ª–∞–≤–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã –¥–µ–±–∞—Ç–æ–≤.
    –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –¥–µ–±–∞—Ç–æ–≤.
    """
    
    def __init__(self, model_manager):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ –≤—Å–µ–º–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏.
        
        –ö–∞–∂–¥—ã–π –∞–≥–µ–Ω—Ç –∏–º–µ–µ—Ç —Å–≤–æ—é —Ä–æ–ª—å:
        - Gatekeeper: —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã  
        - ProDebater: –∞—Ä–≥—É–º–µ–Ω—Ç–∏—Ä—É–µ—Ç "–∑–∞"
        - ContraDebater: –∞—Ä–≥—É–º–µ–Ω—Ç–∏—Ä—É–µ—Ç "–ø—Ä–æ—Ç–∏–≤"
        - AlternativeDebater: –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
        - Judge: –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç –∏ –≤—ã–Ω–æ—Å–∏—Ç –≤–µ—Ä–¥–∏–∫—Ç—ã
        """
        self.model_manager = model_manager
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
        self.gatekeeper = Gatekeeper(model_manager)
        self.pro_debater = ProDebater(model_manager)
        self.contra_debater = ContraDebater(model_manager)
        self.alternative_debater = AlternativeDebater(model_manager)
        self.judge = Judge(model_manager)
        
        # –ú–∞–ø–ø–∏–Ω–≥ –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        self.debaters = {
            "D1": self.pro_debater,
            "D2": self.contra_debater, 
            "D3": self.alternative_debater
        }
        
        # –ò—Å—Ç–æ—Ä–∏—è —Å–µ—Å—Å–∏–π (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ –ë–î)
        self.sessions: Dict[str, DebateSession] = {}
    
    async def run_debate(
        self,
        query: str,
        session_id: Optional[str] = None,
        override_query: Optional[str] = None,
        known_enhanced: Optional[str] = None,
        skip_enhance: bool = False,
        skip_gatekeeper: bool = False,
        on_update: Optional[Callable[[str, Dict], None]] = None,
    ) -> DebateSession:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –¥–µ–±–∞—Ç–æ–≤ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.
        
        –≠—Ç–∞–ø—ã –¥–µ–±–∞—Ç–æ–≤:
        1. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ Gatekeeper
        2. –£–ª—É—á—à–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
        3. –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ 3 —Ä–∞—É–Ω–¥–æ–≤ –¥–µ–±–∞—Ç–æ–≤
        4. –û—Ü–µ–Ω–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–∞—É–Ω–¥–∞ —Å—É–¥—å–µ–π
        5. –í—ã–Ω–µ—Å–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –≤–µ—Ä–¥–∏–∫—Ç–∞
        
        Args:
            query: –ò—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            session_id: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π ID —Å–µ—Å—Å–∏–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
            
        Returns:
            DebateSession: –ü–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–±–∞—Ç–æ–≤
        """
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
        if not session_id:
            session_id = f"debate_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        
        session = DebateSession(
            session_id=session_id,
            original_query=query,
            enhanced_query="",
            start_time=datetime.now()
        )
        
        self.sessions[session_id] = session
        
        try:
            print(f"üé≠ –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–±–∞—Ç—ã –¥–ª—è —Å–µ—Å—Å–∏–∏: {session_id}")
            session.status = "running"
            
            # –≠—Ç–∞–ø 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ —à–≤–µ–π—Ü–∞—Ä–∞ (–µ—Å–ª–∏ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º)
            if not skip_gatekeeper:
                should_debate, rejection_reason = await self.gatekeeper.should_debate(query)
            else:
                should_debate, rejection_reason = True, None
            
            if not should_debate:
                session.status = "rejected"
                session.final_verdict = f"‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω: {rejection_reason}"
                session.end_time = datetime.now()
                return session
            
            print("‚úÖ –ó–∞–ø—Ä–æ—Å –ø—Ä–æ—à–µ–ª —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é")
            
            # –≠—Ç–∞–ø 2: –£–ª—É—á—à–∞–µ–º —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É –∑–∞–ø—Ä–æ—Å–∞
            if skip_enhance and known_enhanced is not None:
                enhanced_query = known_enhanced
            else:
                enhanced_query = await self.gatekeeper.get_enhanced_query(query)
            session.enhanced_query = enhanced_query

            print(f"üìù –ó–∞–ø—Ä–æ—Å —É–ª—É—á—à–µ–Ω: {enhanced_query}")
            if on_update:
                on_update("enhanced_query", {"enhanced_query": enhanced_query})

            # –ö–∞–∫–æ–π –∑–∞–ø—Ä–æ—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –¥–µ–±–∞—Ç–∞—Ö
            debate_query = override_query or enhanced_query
            
            # –≠—Ç–∞–ø 3: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–µ–±–∞—Ç–æ–≤
            session.context = DebateContext(
                query=debate_query,
                current_round=1,
                arguments_history={},
                scores_history={},
                judge_feedback={},
                summaries={},
            )
            
            # –≠—Ç–∞–ø 4: –ü—Ä–æ–≤–æ–¥–∏–º —Ä–∞—É–Ω–¥—ã –¥–µ–±–∞—Ç–æ–≤
            for round_num in range(1, Config.DEBATE_ROUNDS + 1):
                print(f"\nü•ä –†–∞—É–Ω–¥ {round_num}/{Config.DEBATE_ROUNDS}")
                
                session.context.current_round = round_num
                round_result = await self._conduct_round(session.context, on_update=on_update)
                session.results.append(round_result)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ä–∞—É–Ω–¥–∞
                self._update_context_with_results(session.context, round_result)
                
                print(f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å —Ä–∞—É–Ω–¥–∞: {round_result.winner}")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ä–∞—É–Ω–¥–∞–º–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ API
                await asyncio.sleep(1)
            
            # –≠—Ç–∞–ø 5: –ò—Ç–æ–≥–æ–≤—ã–π –≤–µ—Ä–¥–∏–∫—Ç –æ—Ç —Å—É–¥—å–∏
            print("\n‚öñÔ∏è –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –≤–µ—Ä–¥–∏–∫—Ç...")
            session.final_verdict = await self.judge.final_verdict(session.context)
            if on_update and session.final_verdict:
                on_update("final_verdict", {"final_verdict": session.final_verdict})
            
            # –≠—Ç–∞–ø 6: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –ø–æ —Ç–æ–∫–µ–Ω–∞–º –∏ –∑–∞—Ç—Ä–∞—Ç–∞–º
            if token_tracker:
                session.token_stats = token_tracker.format_session_report(session_id)
                print(f"\nüí∞ –û—Ç—á–µ—Ç –ø–æ —Ç–æ–∫–µ–Ω–∞–º –≥–æ—Ç–æ–≤")
                if on_update and session.token_stats:
                    on_update("token_stats", {"token_stats": session.token_stats})
            
            session.status = "completed"
            session.end_time = datetime.now()
            
            print(f"‚úÖ –î–µ–±–∞—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã! –í—Ä–µ–º—è: {session.end_time - session.start_time}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–±–∞—Ç–∞—Ö: {e}")
            session.status = "failed"
            session.final_verdict = f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
            session.end_time = datetime.now()
        
        return session
    
    async def _conduct_round(self, context: DebateContext, on_update: Optional[Callable[[str, Dict], None]] = None) -> RoundResult:
        """
        –ü—Ä–æ–≤–æ–¥–∏—Ç –æ–¥–∏–Ω —Ä–∞—É–Ω–¥ –¥–µ–±–∞—Ç–æ–≤ –º–µ–∂–¥—É –≤—Å–µ–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏.
        
        –ü–æ—Ä—è–¥–æ–∫ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π:
        1. D1 (Pro) - —Å—Ç–æ—Ä–æ–Ω–Ω–∏–∫
        2. D2 (Contra) - –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫  
        3. D3 (Alternative) - –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—â–∏–∫
        4. Judge - –æ—Ü–µ–Ω–∫–∞ —Ä–∞—É–Ω–¥–∞
        
        Args:
            context: –¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–µ–±–∞—Ç–æ–≤
            
        Returns:
            RoundResult: –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—É–Ω–¥–∞ —Å –æ—Ü–µ–Ω–∫–∞–º–∏ –∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º
        """
        
        round_arguments = {}
        
        # –°–æ–±–∏—Ä–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –æ—Ç –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –ø–æ—ç—Ç–∞–ø–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        print("  üó£Ô∏è –°–æ–±–∏—Ä–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...")
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –ø–æ—Ä—è–¥–∫—É: D1, D2, D3
        for role in ["D1", "D2", "D3"]:
            debater = self.debaters[role]
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞
            try:
                argument = await self._get_debater_argument(debater, context, role)
                round_arguments[role] = argument
                print(f"    ‚úì {role}: {len(argument)} —Å–∏–º–≤–æ–ª–æ–≤")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                if on_update:
                    on_update("argument", {"round": context.current_round, "role": role, "text": argument})
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∞–º–º–∞—Ä–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
                try:
                    if hasattr(self.model_manager, "summarize"):
                        summary = await self.model_manager.summarize(argument)
                        if summary:
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∞–º–º–∞—Ä–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                            if on_update:
                                on_update("summary", {"round": context.current_round, "role": role, "summary": summary})
                except Exception:
                    pass  # –°–∞–º–º–∞—Ä–∏ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
                    
            except Exception as e:
                argument = f"[–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞: {str(e)}]"
                round_arguments[role] = argument
                print(f"    ‚ùå {role}: –æ—à–∏–±–∫–∞ - {str(e)}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–∂–µ –æ—à–∏–±–æ—á–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç
                if on_update:
                    on_update("argument", {"round": context.current_round, "role": role, "text": argument})
        
        # –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –î–û –æ—Ü–µ–Ω–∫–∏ —Å—É–¥—å–∏
        context.arguments_history[context.current_round] = round_arguments
        
        # –û—Ü–µ–Ω–∏–≤–∞–µ–º —Ä–∞—É–Ω–¥ —á–µ—Ä–µ–∑ —Å—É–¥—å—é
        print("  ‚öñÔ∏è –°—É–¥—å—è –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç —Ä–∞—É–Ω–¥...")
        round_result = await self.judge.evaluate_round(context, round_arguments)
        if on_update and round_result and hasattr(round_result, "feedback"):
            on_update("judge", {"round": context.current_round, "feedback": round_result.feedback, "scores": {role: score.total for role, score in round_result.scores.items()}, "winner": round_result.winner})
        
        return round_result
    
    async def _get_debater_argument(self, debater, context: DebateContext, role: str) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ç–∞—Å–∫–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
        """
        try:
            return await debater.generate_argument(context)
        except Exception as e:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            return f"[{role}] –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞: {str(e)}"
    
    def _update_context_with_results(self, context: DebateContext, round_result: RoundResult):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–µ–±–∞—Ç–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–∞—É–Ω–¥–∞.
        –î–æ–±–∞–≤–ª—è–µ—Ç –æ—Ü–µ–Ω–∫–∏ –∏ —Ñ–∏–¥–±–µ–∫ —Å—É–¥—å–∏.
        
        –í–ê–ñ–ù–û: –ê—Ä–≥—É–º–µ–Ω—Ç—ã —É–∂–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ context.arguments_history
        –≤ –º–µ—Ç–æ–¥–µ _conduct_round, –ø–æ—ç—Ç–æ–º—É –∑–¥–µ—Å—å –º—ã —Ç–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫–∏.
        """
        
        round_num = context.current_round
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—á–∫–æ–≤
        context.scores_history[round_num] = {
            role: score.total for role, score in round_result.scores.items()
        }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–¥–±–µ–∫ —Å—É–¥—å–∏
        context.judge_feedback[round_num] = round_result.feedback
    
    def get_session_summary(self, session_id: str) -> Optional[str]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –ø–æ —Å–µ—Å—Å–∏–∏ –¥–µ–±–∞—Ç–æ–≤.
        –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
        """
        
        if session_id not in self.sessions:
            return None
        
        session = self.sessions[session_id]
        
        summary_parts = [
            f"üìã –°–í–û–î–ö–ê –î–ï–ë–ê–¢–û–í #{session_id}",
            f"üìù –ó–∞–ø—Ä–æ—Å: {session.original_query}",
            f"‚è±Ô∏è –°—Ç–∞—Ç—É—Å: {session.status}",
            f"üïê –í—Ä–µ–º—è: {session.start_time.strftime('%H:%M:%S')}"
        ]
        
        if session.end_time:
            duration = session.end_time - session.start_time
            summary_parts.append(f"‚åõ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration.total_seconds():.1f}s")
        
        if session.results:
            summary_parts.append(f"ü•ä –†–∞—É–Ω–¥–æ–≤: {len(session.results)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π —Ä–∞—É–Ω–¥–æ–≤
            winners = [result.winner for result in session.results]
            winners_count = {role: winners.count(role) for role in set(winners)}
            winners_str = ", ".join([f"{role}: {count}" for role, count in winners_count.items()])
            summary_parts.append(f"üèÜ –ü–æ–±–µ–¥—ã: {winners_str}")
        
        if session.final_verdict:
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ –≤–µ—Ä–¥–∏–∫—Ç–∞
            verdict_preview = session.final_verdict[:200] + "..." if len(session.final_verdict) > 200 else session.final_verdict
            summary_parts.append(f"‚öñÔ∏è –í–µ—Ä–¥–∏–∫—Ç: {verdict_preview}")
        
        return "\n".join(summary_parts)
    
    def get_detailed_session(self, session_id: str) -> Optional[DebateSession]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—É—é –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏"""
        return self.sessions.get(session_id)
    
    def list_sessions(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö ID —Å–µ—Å—Å–∏–π"""
        return list(self.sessions.keys())
    
    async def run_quick_debate(self, query: str) -> str:
        """
        –ë—ã—Å—Ç—Ä—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è - –∑–∞–ø—É—Å–∫–∞–µ—Ç –¥–µ–±–∞—Ç—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
        –£–¥–æ–±–Ω–æ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ –¥—Ä—É–≥–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
        
        Args:
            query: –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            str: –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–±–∞—Ç–æ–≤ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        """
        
        session = await self.run_debate(query)
        
        if session.status == "rejected":
            return session.final_verdict
        elif session.status == "failed":
            return f"‚ùå –û—à–∏–±–∫–∞: {session.final_verdict}"
        elif session.status == "completed":
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç—á–µ—Ç
            report_parts = [
                f"üéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –î–ï–ë–ê–¢–û–í",
                f"üìù –í–æ–ø—Ä–æ—Å: {session.original_query}",
                ""
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –ø–æ —Ä–∞—É–Ω–¥–∞–º
            if session.results:
                report_parts.append("üìä –°–í–û–î–ö–ê –ü–û –†–ê–£–ù–î–ê–ú:")
                for i, result in enumerate(session.results, 1):
                    winner_scores = result.scores[result.winner]
                    report_parts.append(f"  –†–∞—É–Ω–¥ {i}: {result.winner} ({winner_scores.total} –±–∞–ª–ª–æ–≤)")
                report_parts.append("")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –≤–µ—Ä–¥–∏–∫—Ç
            if session.final_verdict:
                report_parts.append(session.final_verdict)
            
            return "\n".join(report_parts)
        else:
            return f"‚è≥ –î–µ–±–∞—Ç—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ... (—Å—Ç–∞—Ç—É—Å: {session.status})"
